{
  "paragraphs": [
    {
      "text": "%spark\nimport java.sql.Connection\nimport java.sql.DriverManager\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.Row\n\nval thinUrl \u003d \"jdbc:phoenix:thin:url\u003dhttp://phoenix.dev:8765;serialization\u003dPROTOBUF\"\nval connection \u003d DriverManager.getConnection(thinUrl)\n\n//Helper for turning JDBC query results into a DataSet\nval queryToDS \u003d (conn: Connection, query: String) \u003d\u003e {\n    val rs \u003d conn.createStatement().executeQuery(query)\n    val rsmd \u003d rs.getMetaData()\n    \n    //Build a schema object\n    var schemaString \u003d rsmd.getColumnName(1)\n    for ( i \u003c- 2 to rsmd.getColumnCount() ){\n        schemaString \u003d schemaString + \" \" + rsmd.getColumnName(i)\n    }\n    val fields \u003d schemaString.split(\" \")\n      .map(fieldName \u003d\u003e StructField(fieldName, StringType, nullable \u003d true))\n    val schema \u003d StructType(fields)\n    \n    //Convert resultset into DataFrame row by row\n    var rows \u003d Array[Row]()\n    while (rs.next()){\n      //Convert fields of each result set row into an array of Strings\n      val fields \u003d schemaString.split(\" \")\n      var row \u003d Array[String]()\n      for ( i \u003c- 0 to fields.size-1 ){\n        val fieldVal \u003d if (rs.getString(fields(i)) \u003d\u003d null) \"\" else rs.getString(fields(i)).trim\n        row \u003d row :+ fieldVal\n      }\n      rows \u003d rows :+ Row(row:_*)\n    }\n    spark.createDataFrame(sc.parallelize(rows), schema)\n}",
      "dateUpdated": "Nov 28, 2016 4:37:39 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478837758618_-1792485530",
      "id": "20161111-041558_1602977534",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nimport java.sql.Connection\n\nimport java.sql.DriverManager\n\nimport org.apache.spark.sql.types._\n\nimport org.apache.spark.sql.Row\n\nthinUrl: String \u003d jdbc:phoenix:thin:url\u003dhttp://phoenix.dev:8765;serialization\u003dPROTOBUF\n\nconnection: java.sql.Connection \u003d org.apache.calcite.avatica.AvaticaJdbc41Factory$AvaticaJdbc41Connection@193742f4\n\nqueryToDS: (java.sql.Connection, String) \u003d\u003e org.apache.spark.sql.DataFrame \u003d \u003cfunction2\u003e\n"
      },
      "dateCreated": "Nov 11, 2016 4:15:58 AM",
      "dateStarted": "Nov 14, 2016 7:55:30 AM",
      "dateFinished": "Nov 14, 2016 7:55:33 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%jdbc(phoenix)\nselect device_type, count(*) from cx_lookup group by device_type",
      "dateUpdated": "Nov 14, 2016 9:45:58 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "DEVICE_TYPE",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "COUNT(1)",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "DEVICE_TYPE",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "COUNT(1)",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478868776412_521089222",
      "id": "20161111-125256_1671992927",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "DEVICE_TYPE\tCOUNT(1)\naddress\t4124\namplifier\t248\ncoaxial_splitter\t178\nin_line_equalizer\t105\ninternal_coupler\t33\noptical_node\t5\npower_block\t11\npower_inserter\t15\ntap\t1312\n"
      },
      "dateCreated": "Nov 11, 2016 12:52:56 PM",
      "dateStarted": "Nov 14, 2016 9:45:31 AM",
      "dateFinished": "Nov 14, 2016 9:45:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect * from devices",
      "dateUpdated": "Nov 14, 2016 12:46:40 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478862770278_-733925511",
      "id": "20161111-111250_395844110",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "DEVICE_OF_INTEREST\tMER_FLAG\tNEXT_DEVICE_OF_INTEREST\tTOPOLOGY_LEVEL\n1\t0.0\t2\t0\n"
      },
      "dateCreated": "Nov 11, 2016 11:12:50 AM",
      "dateStarted": "Nov 14, 2016 12:46:40 PM",
      "dateFinished": "Nov 14, 2016 12:46:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nimport org.apache.spark.streaming.StreamingContext\nimport org.apache.spark.storage.StorageLevel\nimport org.apache.spark.streaming._\n\nimport org.apache.nifi.remote.client.{SiteToSiteClient,SiteToSiteClientConfig}\nimport org.apache.nifi.spark.{NiFiReceiver, NiFiDataPacket}\n\nval ssc \u003d new StreamingContext(sc, Seconds(10))\nval nifiConf \u003d new SiteToSiteClient.Builder().url(\"http://nifi.dev:8080/nifi\").portName(\"ToSpark\").buildConfig()\nval packetStream \u003d ssc.receiverStream(new NiFiReceiver(nifiConf, StorageLevel.MEMORY_ONLY))\n\nval text \u003d packetStream.map(_.getContent())",
      "dateUpdated": "Nov 11, 2016 6:49:03 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478837760907_-912564795",
      "id": "20161111-041600_154409288",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nimport org.apache.spark.streaming.StreamingContext\n\nimport org.apache.spark.storage.StorageLevel\n\nimport org.apache.spark.streaming._\n\nimport org.apache.nifi.remote.client.{SiteToSiteClient, SiteToSiteClientConfig}\n\nimport org.apache.nifi.spark.{NiFiReceiver, NiFiDataPacket}\n\nssc: org.apache.spark.streaming.StreamingContext \u003d org.apache.spark.streaming.StreamingContext@7920ee42\n\nnifiConf: org.apache.nifi.remote.client.SiteToSiteClientConfig \u003d org.apache.nifi.remote.client.SiteToSiteClient$StandardSiteToSiteClientConfig@130577a\n\npacketStream: org.apache.spark.streaming.dstream.ReceiverInputDStream[org.apache.nifi.spark.NiFiDataPacket] \u003d org.apache.spark.streaming.dstream.PluggableInputDStream@57dbba2a\n\ntext: org.apache.spark.streaming.dstream.DStream[Array[Byte]] \u003d org.apache.spark.streaming.dstream.MappedDStream@5e9c509\n"
      },
      "dateCreated": "Nov 11, 2016 4:16:00 AM",
      "dateStarted": "Nov 11, 2016 6:49:03 AM",
      "dateFinished": "Nov 11, 2016 6:49:06 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Nov 11, 2016 7:06:59 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478891209051_1550965157",
      "id": "20161111-190649_216948319",
      "dateCreated": "Nov 11, 2016 7:06:49 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Setup",
  "id": "2C3GGB44T",
  "angularObjects": {
    "2C35SAQUV:shared_process": [
      {
        "name": "dataSchema",
        "object": {
          "fields": [
            {
              "name": "DEVICE_OF_INTEREST",
              "dataType": {
                "ordering": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "MER_FLAG",
              "dataType": {
                "ordering": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "NEXT_DEVICE_OF_INTEREST",
              "dataType": {
                "ordering": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "TOPOLOGY_LEVEL",
              "dataType": {
                "ordering": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            }
          ],
          "_hashCode": 4.6994278E8,
          "bitmap$0": 8.0
        },
        "noteId": "2C3GGB44T"
      },
      {
        "name": "data",
        "object": [
          {
            "schema": {
              "fields": [
                {
                  "name": "DEVICE_OF_INTEREST",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "MER_FLAG",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "NEXT_DEVICE_OF_INTEREST",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "TOPOLOGY_LEVEL",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": 4.6994278E8,
              "bitmap$0": 8.0
            },
            "values": [
              "1",
              "0.0",
              "2",
              "0"
            ]
          }
        ],
        "noteId": "2C3GGB44T"
      }
    ],
    "2C1SVJQKC:shared_process": [],
    "2BZCYSBP1:shared_process": [],
    "2C3QWZMH9:shared_process": [],
    "2C2VCMDMA:shared_process": [],
    "2C2DNH7EH:shared_process": [],
    "2C2J776HS:shared_process": [],
    "2C24HD65R:shared_process": [],
    "2C33UV8C1:shared_process": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}